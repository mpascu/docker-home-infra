version: '3' 

services:

  #Reverse proxy to route conections from each subdomain to the corresponding container
  #Automate certificate creation and renewal for all docker containers that are proxied enabling HTTPS
  reverse_proxy:
    image: traefik:v2.9.5
    container_name: traefik
    restart: always
    command:
      - "--providers.docker=true"
    labels: 
      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # global redirect to https
      - "traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.redirs.entrypoints=web"
      - "traefik.http.routers.redirs.middlewares=redirect-to-https"
    ports:
      - 80:80
      - 8907:8080
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/traefik/letsencrypt:/letsencrypt
      - ./config/traefik/traefik.yml:/traefik.yml:ro
      - ./config/traefik/config.yml:/config.yml:ro
    dns:
        - 8.8.8.8
    network_mode: "bridge"

  # Database for nextcloud
  #https://hub.docker.com/_/mariadb
  #mariadb:
  #  image: mariadb
  #  container_name: nextcloud-mariadb
  #  volumes:
  #    - ./config/nextcloud-mariadb:/var/lib/mysql
  #    - /etc/localtime:/etc/localtime:ro
  #  environment:
  #    - MYSQL_ROOT_PASSWORD=${mysql_root_pass}
  #    - MYSQL_PASSWORD=${mysql_user_pass}
  #    - MYSQL_DATABASE=nextcloud
  #    - MYSQL_USER=nextcloud
  #  restart: unless-stopped
  
  #File host and share
  #https://hub.docker.com/_/nextcloud/
#  nextcloud:
#    image: nextcloud:21
#    container_name: nextcloud
#    depends_on:
#      - mariadb
#    ports:
#      - 9002:80
#    volumes:
#      - ./config/nextcloud/nextcloud:/var/www/html
#      - ./config/nextcloud/config:/var/www/html/config
#      - ./config/nextcloud/custom_apps:/var/www/html/custom_apps
#      - ./config/nextcloud/data:/var/www/html/data
#      - ./config/nextcloud/themes:/var/www/html/themes
#      - /etc/localtime:/etc/localtime:ro
#      - ${external_storage}:/media/EXT_4TB:rw
#    environment:
#      - VIRTUAL_HOST=cloud.${hostname}
#      - LETSENCRYPT_HOST=cloud.${hostname}
#      - LETSENCRYPT_EMAIL=${mail}
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.cloud.rule=Host(`cloud.${hostname}`)"
#      - "traefik.http.routers.cloud.entrypoints=websecure"
#      - "traefik.http.routers.cloud.tls.certresolver=myresolver"
#    restart: unless-stopped

  #System performance monitor
  #https://hub.docker.com/r/netdata/netdata
  netdata:
    container_name: netdata
    image: netdata/netdata
    hostname: ${hostname}
    ports:
      - 19999:19999
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - PGID=999
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.netdata.rule=Host(`${hostname}`) && PathPrefix(`/netdata/`)"
      - "traefik.http.middlewares.netdata-strip.stripprefix.prefixes=/netdata"
      - "traefik.http.routers.netdata.middlewares=netdata-strip"
      - "traefik.http.routers.netdata.entrypoints=websecure"
      - "traefik.http.routers.netdata.tls.certresolver=myresolver"
      - "traefik.http.services.netdata.loadbalancer.server.port=19999"
    restart: unless-stopped

  #Docker management UI
  #https://hub.docker.com/r/portainer/portainer/
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/portainer:/data
    ports:
      - 9000:9000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${hostname}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=myresolver"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    restart: always

  #Application dashboard
  #https://hub.docker.com/r/linuxserver/heimdall/
  heimdall:
    image: linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=${PID}
      - PGID=${GID}
      - TZ=${TZ}
    volumes:
      - ./config/heimdall:/config
    labels:
      - "traefik.http.routers.heimdall.rule=Host(`${hostname}`)"
      - "traefik.http.routers.heimdall.entrypoints=websecure"
      - "traefik.http.routers.heimdall.tls.certresolver=myresolver"
    restart: unless-stopped

  #DNS sinkhole, blocks ads, malware, spam
  #https://hub.docker.com/r/pihole/pihole/
  pihole:
    container_name: pihole
    domainname: ${hostname}
    hostname: ${hostname}
    image: pihole/pihole:latest   
    ports:
      - 192.168.0.94:53:53/tcp  #Host IP needs to be set here otherwise the other containers can't resolve DNS
      - 192.168.0.94:53:53/udp
      # - '67:67/udp'
      - '8001:80'
      - '8002:443'
    volumes:
      - ./config/pihole/pihole:/etc/pihole
      - ./config/pihole/my-external.conf:/etc/lighttpd/external.conf
      # - ${USERDIR}/docker/pihole/pihole.log:/var/log/pihole.log #Uncomment to make logs persistent
      - ./config/pihole/dnsmasq.d:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN
    dns:
      - 127.0.0.1
      - 8.8.8.8
    environment:
      #- ServerIP=${SERVER_IP}
      - TZ=${TZ}
      - WEBPASSWORD=${piholepasswd}
      - DNS1=127.0.0.1
      - DNS2=1.1.1.1
      - VIRTUAL_HOST= ${hostname}
      - VIRTUAL_PORT= 80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`${hostname}`) && PathPrefix(`/pihole`)"
      - "traefik.http.middlewares.pihole-strip.stripprefix.prefixes=/pihole"
      - "traefik.http.routers.pihole.middlewares=pihole-strip"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.tls.certresolver=myresolver"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
    restart: unless-stopped
  
  guacamole:
    image: oznu/guacamole
    container_name: guacamole
    volumes:
      - ./config/guacamole:/config
    ports:
      - 8079:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.guacamole.rule=Host(`guacamole.${hostname}`)"
      - "traefik.http.routers.guacamole.entrypoints=websecure"
      - "traefik.http.routers.guacamole.tls.certresolver=myresolver"
      - "traefik.http.services.guacamole.loadbalancer.server.port=8080"
    restart: unless-stopped

  # Ebook manager
  #https://hub.docker.com/r/linuxserver/calibre
  calibre:
    image: linuxserver/calibre
    container_name: calibre
    environment:
      - PUID=${PID}
      - PGID=${GID}
      - TZ=${TZ}
      - GUAC_USER=marc #optional
      - GUAC_PASS=0711aae7867f68f983ba13ca7be91742 #md5 hashed password
      - UMASK_SET=022 #optional
    volumes:
      - ${internal_storage}/BIBLIOTECA/calibre-library:/config
    ports:
      - 8880:8080
      - 8881:8081
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.calibre.rule=Host(`calibre.${hostname}`)"
      - "traefik.http.routers.calibre.entrypoints=websecure"
      - "traefik.http.routers.calibre.tls.certresolver=myresolver"
      - "traefik.http.services.calibre.loadbalancer.server.port=8080"
    restart: unless-stopped
  
  # Ebook library
  #https://hub.docker.com/r/linuxserver/calibre-web
  calibre-web:
    image: linuxserver/calibre-web
    container_name: calibre-web
    environment:
      - PUID=${PID}
      - PGID=${GID}
      - TZ=${TZ}
      - DOCKER_MODS=linuxserver/calibre-web:calibre
    volumes:
      - ./config/calibre-web:/config
      - ${internal_storage}/BIBLIOTECA/calibre-library:/books
    ports:
      - 8883:8083
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.biblioteca.rule=Host(`${hostname}`) && PathPrefix(`/biblioteca/`)"
      - "traefik.http.middlewares.biblioteca-strip.stripprefix.prefixes=/biblioteca"
      - "traefik.http.routers.biblioteca.middlewares=biblioteca-strip"
      - "traefik.http.routers.biblioteca.entrypoints=websecure"
      - "traefik.http.routers.biblioteca.tls.certresolver=myresolver"
    restart: unless-stopped

  # Torrent client
  # https://hub.docker.com/r/linuxserver/transmission
  transmission:
    image: linuxserver/transmission
    container_name: transmission
    hostname: transmission
    environment:
      - PUID=${PID}
      - PGID=${GID}
      - TZ=${TZ}
      - TRANSMISSION_WEB_HOME=/combustion-release/
      - USER=username #optional
      - PASS=${transmission_pass} #optional
    volumes:
      - ./config/transmission:/config
      - ${external_storage}/downloads:/downloads
      - ${external_storage}/downloads:/watch
    ports:
      - 8882:9091
      - 51413:51413
      - 51413:51413/udp
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transmission.rule=Host(`${hostname}`) && PathPrefix(`/transmission/`)"
      - "traefik.http.middlewares.transmission-strip.stripprefix.prefixes=/transmission"
      - "traefik.http.routers.transmission.middlewares=transmission-strip"
      - "traefik.http.routers.transmission.entrypoints=websecure"
      - "traefik.http.routers.transmission.tls.certresolver=myresolver"
    restart: unless-stopped

  # https://hub.docker.com/r/linuxserver/bazarr
  #bazarr:
  #  image: linuxserver/bazarr
  #  container_name: bazarr
  #  environment:
  #    - PUID= ${PID}
  #    - PGID= ${GID}
  #    - TZ= ${TZ}
  #    - VIRTUAL_HOST=bazarr.${hostname}
  #    - VIRTUAL_PORT=6767
  #    - LETSENCRYPT_HOST=bazarr.${hostname}
  #    - LETSENCRYPT_EMAIL=${mail}
  #  volumes:
  #    - ./config/bazarr:/config
  #    - ${external_storage}/media/movies:/movies
  #    - ${external_storage}/media/tv:/tv
  #  ports:
  #    - 8884:6767
  #  networks:
  #    - default
  #  restart: unless-stopped

  # https://hub.docker.com/r/linuxserver/sonarr
  #sonarr:
  #  image: linuxserver/sonarr
  #  container_name: sonarr
  #  environment:
  #    - PUID= ${PID}
  #    - PGID= ${GID}
  #    - TZ= ${TZ}
  #  volumes:
  #    - ./config/sonarr:/config
  #    - ${external_storage}/media/tv:/tv
  #    - ${external_storage}/downloads:/downloads
  #  ports:
  #    - 8885:8989
  #  labels:
  #    - "traefik.http.routers.sonarr.rule=Host(`sonarr.${hostname}`)"
  #    - "traefik.http.routers.sonarr.entrypoints=websecure"
  #    - "traefik.http.routers.sonarr.tls.certresolver=myresolver"
  #  restart: unless-stopped

  # https://hub.docker.com/r/linuxserver/radarr
  #radarr:
  #  image: linuxserver/radarr
  #  container_name: radarr
  #  environment:
  #    - PUID= ${PID}
  #    - PGID= ${GID}
  #    - TZ= ${TZ}
  #  volumes:
  #    - ./config/radarr:/config
  #    - ${external_storage}/media/movies:/movies
  #    - ${external_storage}/downloads:/downloads
  #  ports:
  #    - 8886:7878
  #  labels:
  #    - "traefik.http.routers.radarr.rule=Host(`radarr.${hostname}`)"
  #    - "traefik.http.routers.radarr.entrypoints=websecure"
  #    - "traefik.http.routers.radarr.tls.certresolver=myresolver"
  #  restart: unless-stopped
#
  ## https://hub.docker.com/r/linuxserver/lidarr
  #lidarr:
  #  image: linuxserver/lidarr
  #  container_name: lidarr
  #  environment:
  #    - PUID= ${PID}
  #    - PGID= ${GID}
  #    - TZ= ${TZ}
  #  volumes:
  #    - ./config/lidarr:/config
  #    - ${external_storage}/media/music:/music
  #    - ${external_storage}/downloads:/downloads
  #  ports:
  #    - 8887:8686
  #  labels:
  #    - "traefik.http.routers.lidarr.rule=Host(`lidarr.${hostname}`)"
  #    - "traefik.http.routers.lidarr.entrypoints=websecure"
  #    - "traefik.http.routers.lidarr.tls.certresolver=myresolver"
  #  restart: unless-stopped
#
  ## https://hub.docker.com/r/linuxserver/jackett
  #jackett:
  #  image: linuxserver/jackett
  #  container_name: jackett
  #  hostname: jackett
  #  environment:
  #    - PUID= ${PID}
  #    - PGID= ${GID}
  #    - TZ= ${TZ}
  #  volumes:
  #    - ./config/jackett:/config
  #    - ${external_storage}/downloads:/downloads
  #  ports:
  #    - 8888:9117
  #  labels:
  #    - "traefik.http.routers.jackett.rule=Host(`jackett.${hostname}`)"
  #    - "traefik.http.routers.jackett.entrypoints=websecure"
  #    - "traefik.http.routers.jackett.tls.certresolver=myresolver"
  #  restart: unless-stopped
#
#
  ## https://hub.docker.com/r/lsiocommunity/organizr
  organizr:
    image: organizr/organizr
    container_name: organizr
    environment:
      - fpm=true
      - branch=v2-master
      - PUID=${PID}
      - PGID=${GID}
    volumes:
      - ./config/organizr:/config
    ports:
      - 8889:80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.organizr.rule=Host(`${hostname}`) && PathPrefix(`/organizr`)"
      - "traefik.http.middlewares.organizr-strip.stripprefix.prefixes=/organizr"
      - "traefik.http.routers.organizr.middlewares=organizr-strip"
      - "traefik.http.routers.organizr.entrypoints=websecure"
      - "traefik.http.routers.organizr.tls.certresolver=myresolver"
      - "traefik.http.services.organizr.loadbalancer.server.port=80"
    restart: unless-stopped

  # https://github.com/containrrr/watchtower
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    environment:
      - TZ=${TZ}
      #WATCHTOWER_NOTIFICATIONS: slack
      #WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL: ${SLACK}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.docker/config.json:/config.json:ro
    restart: unless-stopped
    command: --interval 300 --cleanup

  # https://hub.docker.com/r/linuxserver/plex/
  #plex:
  #  image: linuxserver/plex
  #  container_name: plex
  #  environment:
  #    - PUID=${PID}
  #    - PGID=${GID}
  #    - VERSION=docker
  #  volumes:
  #    - ./config/plex:/config
  #    - ${external_storage}/media/tv:/data/tvshows
  #    - ${external_storage}/media/movies:/data/movies
  #    - ${external_storage}/media/music:/data/music
  #    - ./transcode:/transcode
  #  ports:
  #    - '32400:32400'
  #    - '32400:32400/udp'
  #    - '32469:32469'
  #    - '32469:32469/udp'
      #- '5353:5353/udp'
  #    - '1900:1900/udp'
  #  restart: unless-stopped

#  tautulli:
#    image: tautulli/tautulli
#    container_name: tautulli
#    environment:
#      - PUID=${PID}
#      - PGID=${GID}
#      - TZ=${TZ}
#      - VIRTUAL_HOST=tautulli.${hostname}
#      - VIRTUAL_PORT=8181
#      - LETSENCRYPT_HOST=tautulli.${hostname}
#      - LETSENCRYPT_EMAIL=${mail}
#    volumes:
#      - ./config/tautulli:/config
#      - ./config/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro
#    ports:
#      - 8901:8181
#    depends_on:
#      - plex
#    restart: unless-stopped

#  ombi:
#    image: linuxserver/ombi
#    container_name: ombi
#    environment:
#      - PUID=${PID}
#      - PGID=${GID}
#      - TZ=${TZ}
#      - VIRTUAL_HOST=ombi.${hostname}
#      - VIRTUAL_PORT=3579
#      - LETSENCRYPT_HOST=ombi.${hostname}
#      - LETSENCRYPT_EMAIL=${mail}
#    volumes:
#      - ./config/ombi:/config
#    ports:
#      - 8902:3579
#    restart: unless-stopped
  
  #Backup software
  #https://www.duplicati.com/
  duplicati:
    image: linuxserver/duplicati
    container_name: duplicati
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TZ}
    volumes:
      - ./config/duplicati:/config
      - ${external_storage}/BACKUPS/docker-home-infra:/backups
      - ./:/source
    ports:
      - 8903:8200
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.duplicati.rule=Host(`duplicati.${hostname}`)"
      - "traefik.http.routers.duplicati.entrypoints=websecure"
      - "traefik.http.routers.duplicati.tls.certresolver=myresolver"
    restart: unless-stopped

#  gitpod:
#    image: gitpod/workspace-full
#    container_name: gitpod
#    depends_on:
#      - letsencrypt
#      - proxy
#    ports:
#      - 8000:8000
#    environment:
#      - TZ=${TZ}
#      - VIRTUAL_HOST=ide.${hostname}
#      - LETSENCRYPT_HOST=ide.${hostname}
#      - LETSENCRYPT_EMAIL=${mail}
#    restart: unless-stopped

  #Kanban board
  #https://hub.docker.com/r/restyaplatform/restyaboard
  restyaboard:
    container_name: restya
    hostname: restya
    image: restyaplatform/restyaboard:dev
    depends_on:
      - postgres
    volumes:
      - ./config/restya/media:/usr/share/nginx/html/media
    ports:
      - 8904:80
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_ADMIN_USER=postgres
      - POSTGRES_ADMIN_PASS=${postgres_pass}
      - RESTYA_DB_USERNAME=restya
      - RESTYA_DB_USERPASS=restyadbpasswordchangeme
      - RESTYA_DB=restyaboard
        #- SMTP_SERVER=smtp_relay
        #- SMTP_PORT=587
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.restyaboard.rule=Host(`kanban.${hostname}`)"
      - "traefik.http.routers.restyaboard.entrypoints=websecure"
      - "traefik.http.routers.restyaboard.tls.certresolver=myresolver"
    restart: always

  # Mail sender, needed to send mail for registration and password recovery
  # https://hub.docker.com/r/boky/postfix for documentation
  smtp_relay:
    container_name: smtp_relay
    image: boky/postfix
    environment:
      #- RELAYHOST=CONFIGURE_ME
      - ALLOW_EMPTY_SENDER_DOMAINS=true
    ports:
      - 9998:587
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.smtp.rule=Host(`smtp.${hostname}`)"
      - "traefik.http.routers.smtp.entrypoints=websecure"
      - "traefik.http.routers.smtp.tls.certresolver=myresolver"
    restart: unless-stopped

  #Database
  postgres:
    container_name: postgres
    image: postgres:13-alpine
    ports:
      - 8909:5432
    labels:
      - "restya db"
      - "traefik.tcp.routers.postgres.rule=HostSNI(`postgres.${hostname}`)"
      - "traefik.tcp.routers.postgres.entrypoints=postgres"
    volumes: #793b443664b0ca41eed9c8dcaf1f5a532d00af8cbeb4d5da221907cd62dd927f
      - ./config/postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${postgres_pass}
    restart: always        
  
  #Database manager
  #https://hub.docker.com/_/adminer/
  adminer:
    container_name: adminer
    image: adminer
    ports:
      - 8905:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`adminer.${hostname}`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls.certresolver=myresolver"
    restart: unless-stopped

  #homeassistant:
  #  container_name: home-assistant
  #  image: homeassistant/home-assistant:stable
  #  volumes:
  #    - ./config/homeassistant:/config
  #  ports:
  #    - 8906:8123
  #  environment:
  #    - TZ=${TZ}
  #  labels:
  #    - "traefik.http.routers.homeassistant.rule=Host(`smarthome.${hostname}`)"
  #    - "traefik.http.routers.homeassistant.entrypoints=websecure"
  #    - "traefik.http.routers.homeassistant.tls.certresolver=myresolver"
  #  restart: always

  sftp:
    image: atmoz/sftp
    volumes:
        - ./config/sftp:/home/foo/upload
    ports:
        - "2222:22"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sftp.rule=Host(`sftp.${hostname}`)"
      - "traefik.http.routers.sftp.entrypoints=websecure"
      - "traefik.http.routers.sftp.tls.certresolver=myresolver"
    command: foo:Olakase12:1001

  #openhab:
  #  container_name: openhab
  #  image: "openhab/openhab:2.5.6"
  #  restart: always
  #  ports:
  #    - "8908:8080"
      #- "8443:8443"
  #  volumes:
  #    - "./config/openhab/addons:/openhab/addons"
  #    - "./config/openhab/conf:/openhab/conf"
  #    - "./config/openhab/userdata:/openhab/userdata"
  #  environment:
  #    OPENHAB_HTTP_PORT: "8080"
  #    OPENHAB_HTTPS_PORT: "8443"
  #    EXTRA_JAVA_OPTS: "-Duser.timezone=${TZ}"
  #  labels:
  #    - "traefik.http.routers.openhab.rule=Host(`openhab.${hostname}`)"
  #    - "traefik.http.routers.openhab.entrypoints=websecure"
  #    - "traefik.http.routers.openhab.tls.certresolver=myresolver"
  #    - "traefik.http.services.openhab.loadbalancer.server.port=8080"
  
  crontab-ui:
    #build: .
    container_name: crontab-ui
    image: alseambusher/crontab-ui:latest
    restart: always
    ports:
      - 8989:8000
    volumes:
       - /var/run/docker.sock:/var/run/docker.sock #need to run docker in docker
       - ./config/crontab-ui/scripts:/crontab-ui/scripts 
       - ./config/crontab-ui/backups:/crontab-ui/crontabs 
#      - "/etc/cron.d:/etc/crontabs" #Uncomment this to have your cron set in the host machine
    command: sh -c "apk add docker && supervisord -c /etc/supervisord.conf"
    environment:
      - TZ=${TZ}
      - BASE_URL=/crontab
      - BASIC_AUTH_USER=admin
      - BASIC_AUTH_PWD=${crontab_pass}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.crontab-ui.rule=Host(`${hostname}`) && PathPrefix(`/crontab`)"
      - "traefik.http.routers.crontab-ui.entrypoints=websecure"
      - "traefik.http.routers.crontab-ui.tls.certresolver=myresolver"
      - "traefik.http.services.crontab-ui.loadbalancer.server.port=8000"

  speedtest:
    container_name: speedtest
    image: henrywhitaker3/speedtest-tracker
    ports:
      - 8990:80
    volumes:
      - ./config/speedtest:/config
    environment:
      - TZ=${TZ}
      - PGID=${GID}
      - PUID=${PID}
      - OOKLA_EULA_GDPR=true
      - APP_URL=https://marcpascu.com/speedtest
      - BASE_PATH=/speedtest
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "200k"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.speedtest.rule=Host(`${hostname}`) && PathPrefix(`/speedtest/`)"
      - "traefik.http.routers.speedtest.entrypoints=websecure"
      - "traefik.http.routers.speedtest.tls.certresolver=myresolver"
    restart: unless-stopped

  uptime-kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma:1
    ports:
      - 8991:3001
    dns:
      - 192.168.0.94
    volumes:
      - ./config/uptime-kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - UPTIME_KUMA_DISABLE_FRAME_SAMEORIGIN=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kuma.rule=Host(`kuma.${hostname}`)"
      - "traefik.http.routers.kuma.entrypoints=websecure"
      - "traefik.http.routers.kuma.tls.certresolver=myresolver"
    restart: unless-stopped

  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Optional, only if you want docker integration
      - ./config/homarr/configs:/app/data/configs
      - ./config/homarr/icons:/app/public/icons
      - ./config/homarr/data:/data
    ports:
      - '7575:7575'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homarr.rule=Host(`${hostname}`)"
      - "traefik.http.routers.homarr.entrypoints=websecure"
      - "traefik.http.routers.homarr.tls.certresolver=myresolver"


networks:
  default:
    external:
      name: docker_infra_net
